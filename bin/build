
local args = { ... }

local paths = {}
local main = "init"
local output = "./run"
local includeFlare = false
local minify = false

local help = [[build [options] [dirs]

options:
    -o output - the output file (default=./run) without .lua, '.' is replaced with the project path
    -m main - the main file (default=init) without .lua
    -c - minify source code
    -f - include Flare source files in the build

dirs:
    Each directory given is added as a path that Flare looks in when requiring files

examples:
    build MyProject - builds MyProject with main file 'MyProject/init.lua' and outputs to 'MyProject/run.lua'
    build Test -m main -o ./out - builds Test with main file 'Test/main.lua' and outputs to 'Test/out.lua']]

if args[1] == "-h" or args[1] == "help" then
	return print( help )
end

local flag
for i = 1, #args do
	if args[i] == "-m" then
		flag = "main"
	elseif args[i] == "-o" then
		flag = "output"
	elseif args[i] == "-c" then
		minify = true
	elseif args[i] == "-f" then
		includeFlare = true
	elseif flag == "main" then
		flag = nil
		main = args[i]
	elseif flag == "output" then
		flag = nil
		output = args[i]
	else
		paths[#paths + 1] = args[i]
	end
end

local minAPI
if minify then
	minAPI = setmetatable( {}, { __index = _ENV or getfenv() } )
	local h = fs.open( "Flare/minify.lua", "r" )
	if h then
		local f, err = load( h.readAll(), "minify", nil, minAPI )
		h.close()
		if not f then
			error( err, 0 )
		end
		f()
	else
		error( "failed to open Flare/minify.lua", 0 )
	end
end

local userpathcount = #paths
if userpathcount == 0 then
	error( "expected one or more paths", 0 )
end

for i = 1, userpathcount do
	if not fs.isDir( paths[i] ) then
		error( "no such directory " .. ("%q"):format( paths[i] ), 0 )
	end
end

local function formatFileContent( str )
	if minify then
		return ("%q"):format( minAPI.Rebuild.MinifyString( str ) ):gsub( "\\\n", "\\n" )
	end
	return ("%q"):format( str )
end

local FLAREPATH = "Flare/lib;Flare/lib/elements"
for seg in FLAREPATH:gmatch "[^;]+" do
	paths[#paths + 1] = seg
end

local required = {}
local lookup = {}

local files = "{\n"

local function requirefile( file )
	if required[file] then return end
	required[file] = true

	local path = file:gsub( "%.", "/" )
	local fpath, isFlareFile
	
	for i = 1, #paths do
		if fs.exists( paths[i] .. "/" .. path .. ".lua" ) and not fs.isDir( paths[i] .. "/" .. path .. ".lua" ) then
			fpath = paths[i] .. "/" .. path .. ".lua"
		elseif fs.exists( paths[i] .. "/" .. path .. "/init.lua" ) and not fs.isDir( paths[i] .. "/" .. path .. "/init.lua" ) then
			fpath = paths[i] .. "/" .. path .. "/init.lua"
		end
		if fpath then
			isFlareFile = i > userpathcount
			break
		end
	end

	if not fpath then
		error( "failed to find file " .. ("%q"):format( file ) .. " in paths given", 0 )
	end

	lookup[file] = fpath

	local h = fs.open( fpath, "r" )
	local content = h.readAll()
	h.close()

	local function _err()
		error( "@", 0 )
	end
	local env = setmetatable( { require = requirefile }, {} )

	local f, err = load( content, file, nil, env )
	if not f then
		error( err, 0 )
	end

	getmetatable( env ).__index = _err
	getmetatable( env ).__newindex = _err

	local ok, err = pcall( f, file )
	if not ok and err ~= "@" then
		error( err, 0 )
	end

	if includeFlare or not isFlareFile then
		print( "Including file '" .. file .. "' (" .. fpath .. ")" )
		files = files .. "\t[" .. ("%q"):format( file ) .. "] = " .. formatFileContent( content ) .. ";\n"
	end
end

requirefile( main )

if includeFlare then
	requirefile "class"
	requirefile "UIView"
	requirefile "Timer"
	requirefile "graphics.ScreenCanvas"
	requirefile "Event.Event"
	requirefile "Event.MouseEvent"
	requirefile "Event.KeyboardEvent"
	requirefile "Event.TextEvent"
	requirefile "Timer"
end

files = files .. "}"

local FlareInstaller = [[
if not fs.exists "Flare" then
	print "Downloading Flare"
	local h = http.get "http://pastebin.com/raw.php?i=SD25GhYf"
	if h then
		local f, err = load( h.readAll(), "installer", nil, _ENV or getfenv() )
		h.close()
		f()
	else
		return error( "Cannot install Flare", 0 )
	end
end
]]

local str = "local files = " .. files .. "\n" .. ( includeFlare and "" or  FlareInstaller ) .. "local loader"

if includeFlare then
	local run = fs.open( "Flare/run.lua", "r" )
	if run then
		str = str .. " = " .. formatFileContent( run.readAll() )
		run.close()
	else
		error( "failed to read Flare", 0 )
	end
else
	str = str .. "\nlocal h = fs.open( \"Flare/run.lua\", \"r\" )\nif h then\n\tloader = h.readAll()\n\th.close()\nelse\n\terror( \"failed to read Flare\", 0 )\nend"
end

str = str .. "\nlocal f, err = load( loader, \"Flare\", nil, _ENV or getfenv() )\
if not f then\
	error( \"there was a problem with Flare!: \" .. err, 0 )\
end\
f( files, " .. ("%q"):format( main ) .. " )"

local w = {}
local path = output:gsub( "%.", paths[1] ) .. ".lua"
if not w[path] then
	w[path] = true
	local h = fs.open( path, "w" )
	if h then
		h.write( str )
		h.close()
	else
		print( "Failed to open output file " .. ("%q"):format( path ) )
	end
end
