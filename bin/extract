
local path, output = ...

local function assertype( a, b, c )
	return type( a ) == b and a or error( c, 0 )
end

assertype( path, "string", "expected input path as arg#1" )
assertype( output, "string", "expected output path as arg#2" )

if fs.isDir( path ) then
	error( "input path is a directory", 0 )
end
if fs.exists( output ) and not fs.isDir( output ) then
	error( "output path is not a directory", 0 )
end

local h = fs.open( path, "r" )
local content = h.readAll()
h.close()

if content:find "}\nif not fs.exists \"Flare\" then\n" then
	local pos = #content - content:reverse():find( ("}\nif not fs.exists \"Flare\" then\n"):reverse() ) - 30
	local f = content:sub( #("local files = ") + 1, pos )
	local t = textutils.unserialize( f )
	if type( t ) == "table" then
		for k, v in pairs( t ) do
			local h = fs.open( output .. "/" .. k, "w" )
			h.write( v )
			h.close()
		end
	else
		error( "couldn't unserialize application", 0 )
	end
else
	error( "path is not a Flare application", 0 )
end
