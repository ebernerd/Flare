
UITabs.lua
----------

The UITabs element is an object containing a list of string tabs that can be selected. It automatically adds < and > buttons if the width of the tabs combined exceeds the width of the element.

	Note, the height of this object cannot be changed from 1.
	Also note, to add or remove options to this, you have to do a little hacky method:

		-- manipulate options table, i.e. table.insert( element.options, "woah" )
		element.width = element.width -- calls the setter getting it to update things

	UITabs( number x, number y, number width, table{string} options )
		- creates a UITabs element with the options given

	(Callback) UITabs:onSelect()
		- called when an option is selected, after 'self.selected' is updated

	(number) UITabs.selected
		- the currently selected tab, with 1 being the first tab, and #options being the last

	(bool) UITabs.showButtons
		- whether the tabs object is showing tabs

class "UITabs" extends "UIElement" {
	options = {};
	showButtons = false;

	selected = nil;

	colour = 1;
	textColour = colours.grey;
	selectedColour = colours.cyan;
	selectedTextColour = colours.white;
	buttonColour = colours.lightGrey;
	buttonTextColour = colours.white;
	separator = "|";
	seperatorTextColour = colours.lightGrey;
}

function UITabs:init( x, y, width, options )

function UITabs:select( index )
	local t = formatOptions( self.options )[index]
	if t then
		self:changeSelection( t.x, t.width )
		if self.selected ~= index and self.onSelect then
			self.raw.selected = index
			self:onSelect( index )
		else
			self.raw.selected = index
		end
	end
end

function UITabs:getContentWidth()
	local w = 0
	for i = 1, #self.options do
		w = w + 2 + #self.options[i]
	end
	return w + #self.options - 1
end